# .github/workflows/ci.yml
name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# Define default environment variables for interpolation during validation.
# Adjust values and add others expected by your docker-stack.yml.
env:
  YOUR_REAL_EMAIL: ci-validation@example.com # Dummy value for Traefik ACME email
  YOUR_DOMAIN: ci-validation.example.com   # Dummy value for Traefik domain rules

jobs:
  # Job 1: Basic Compose file validation (syntax, interpolation, basic path checks)
  validate-compose-config:
    name: Validate Docker Compose Syntax & Interpolation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      # Create dummy files referenced in the stack file (needed for `docker compose config`)
      # These steps might be repeated in the next job; kept here specifically for this validation scope.
      - name: Create Dummy Secret Files for Validation
        run: |
          mkdir -p ./secrets
          echo "dummy_ci_root_password" > ./secrets/mysql_root_password.txt
          echo "dummy_ci_user_password" > ./secrets/mysql_password.txt
          # Add other secret files if referenced via 'file:' syntax in docker-stack.yml
        shell: bash

      - name: Create Dummy Nginx Config for Validation
        run: |
          mkdir -p ./nginx
          echo "server { listen 80; server_name _; root /var/www/html; index index.php; location / { try_files \$uri \$uri/ /index.php?\$args; } location ~ \.php$ { try_files \$uri =404; fastcgi_pass wordpress_fpm:9000; fastcgi_index index.php; include fastcgi_params; fastcgi_param SCRIPT_FILENAME \$document_root\$fastcgi_script_name; } }" > ./nginx.conf
        shell: bash

      # Buildx setup is optional for 'config' but good practice if build contexts are validated
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Validate Compose File with Interpolation
        # Checks syntax, resolves ENV variables, merges files (if applicable),
        # and checks basic file path existence (e.g., for 'file:' secrets, configs, build contexts).
        # Errors will be printed to the log (removed '> /dev/null').
        run: docker compose -f docker-stack.yml config

  # Job 2: Validate against Docker Swarm deployment logic (dry run)
  validate-stack-deploy-dry-run:
    name: Validate Docker Stack Deploy (Dry Run)
    needs: validate-compose-config # Run only if basic config is valid
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      # Re-create dummy files if they are explicitly mounted or needed by entrypoints
      # Redundant if only Swarm secrets/configs are used internally by services,
      # but included for safety/completeness depending on stack details.
      - name: Create Dummy Secret Files (if needed for mounts/entrypoints)
        run: |
          mkdir -p ./secrets
          echo "dummy_ci_root_password" > ./secrets/mysql_root_password.txt
          echo "dummy_ci_user_password" > ./secrets/mysql_password.txt
        shell: bash

      - name: Create Dummy Nginx Config (if needed for mount)
        run: |
          mkdir -p ./nginx
          echo "server { listen 80; server_name _; root /var/www/html; index index.php; location / { try_files \$uri \$uri/ /index.php?\$args; } location ~ \.php$ { try_files \$uri =404; fastcgi_pass wordpress_fpm:9000; fastcgi_index index.php; include fastcgi_params; fastcgi_param SCRIPT_FILENAME \$document_root\$fastcgi_script_name; } }" > ./nginx.conf
        shell: bash

      - name: Initialize Docker Swarm
        run: docker swarm init

      - name: Create Dummy Docker Swarm Secrets for Validation
        # `docker stack deploy` checks that Swarm secrets referenced in the stack actually exist.
        run: |
          echo "dummy_ci_root_password" | docker secret create mysql_root_password -
          echo "dummy_ci_user_password" | docker secret create mysql_password -
          # Add `docker secret create` for all other Swarm secrets defined in your stack file
        shell: bash
        
      # Optional: Add `docker config create` here if your stack uses Docker Swarm configs

      - name: Validate Stack Deployment via Dry Run
        # Uses Swarm's logic to check deployment validity (secret/config existence, network conflicts etc.)
        # Does NOT actually start containers.
        run: docker stack deploy --compose-file docker-stack.yml ci_test_stack --with-registry-auth --prune --dry-run

      # Cleanup Swarm mode (optional but good practice in CI)
      - name: Leave Docker Swarm
        if: always() # Ensure cleanup even on failure
        run: docker swarm leave --force
