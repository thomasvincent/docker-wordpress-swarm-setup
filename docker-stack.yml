version: "3.9"

secrets:
  mysql_root_password:
    file: ./secrets/mysql_root_password.txt
  mysql_password:
    file: ./secrets/mysql_password.txt
  # Optional: Add redis_password secret if needed

services:

  # MariaDB Galera Cluster
  wpdbcluster:
    image: mariadb:11.3
    networks:
      - backend
    deploy:
      replicas: 3 # See comment below about bootstrapping
      restart_policy:
        condition: on-failure
      update_config:
        parallelism: 1
        delay: 15s
        order: stop-first # Safer for DBs during updates
      resources: # Add appropriate limits/reservations
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    environment:
      # MARIADB_GALERA_CLUSTER_BOOTSTRAP: "yes" # CRITICAL: Only use on FIRST node, FIRST time. Manage manually or via script.
      MARIADB_GALERA_CLUSTER_NAME: "wp_galera_cluster" # Custom cluster name
      MARIADB_GALERA_CLUSTER_ADDRESS: "gcomm://wpdbcluster" # Use service discovery
      MARIADB_GALERA_MARIADB_GALERA_USER: "galera_user" # User for SST/IST
      MARIADB_GALERA_MARIADB_GALERA_PASSWORD_FILE: /run/secrets/mysql_password # Re-use WP user pass or create separate
      MYSQL_ROOT_PASSWORD_FILE: /run/secrets/mysql_root_password
      MYSQL_DATABASE: wordpress
      MYSQL_USER: wordpress
      MYSQL_PASSWORD_FILE: /run/secrets/mysql_password
    volumes:
      - wpdb-data:/var/lib/mysql
      - ./mariadb-init:/docker-entrypoint-initdb.d # Ensure init scripts are idempotent
    secrets:
      - mysql_root_password
      - mysql_password
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "--password=$$MYSQL_ROOT_PASSWORD"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s # Give time for cluster sync on start

  # WordPress Nginx Web Server (Handles HTTP)
  wordpress_nginx:
    image: nginx:1.25-alpine # Use a specific version
    networks:
      - frontend
      - backend
    deploy:
      replicas: 2
      restart_policy:
        condition: on-failure
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first
      resources: # Add appropriate limits/reservations
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.2'
          memory: 128M
      labels:
        - "traefik.enable=true"
        # HTTP Router
        - "traefik.http.routers.wordpress-http.rule=Host(`your-domain.com`)"
        - "traefik.http.routers.wordpress-http.entrypoints=web"
        # Optional: Redirect HTTP to HTTPS
        - "traefik.http.routers.wordpress-http.middlewares=redirect-to-https@docker"
        - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
        # HTTPS Router
        - "traefik.http.routers.wordpress-secure.rule=Host(`your-domain.com`)"
        - "traefik.http.routers.wordpress-secure.entrypoints=websecure"
        - "traefik.http.routers.wordpress-secure.tls=true"
        - "traefik.http.routers.wordpress-secure.tls.certresolver=letsencrypt"
        # Service definition
        - "traefik.http.services.wordpress-service.loadbalancer.server.port=80"
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro # Mount your Nginx config
      - wp-content:/var/www/html/wp-content # Share content with FPM
    depends_on: # No effect in Swarm, but useful for compose up logic
      - wordpress_fpm
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/"] # Check Nginx is serving
      interval: 10s
      timeout: 3s
      retries: 3

  # WordPress PHP-FPM (Handles PHP Execution)
  wordpress_fpm:
    image: wordpress:6.5-php8.3-fpm # Use a specific version
    networks:
      - backend # Only needs backend access
    deploy:
      replicas: 2
      restart_policy:
        condition: on-failure
      update_config:
        parallelism: 1
        delay: 10s
      resources: # Add appropriate limits/reservations
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.5'
          memory: 256M
    environment:
      WORDPRESS_DB_HOST: wpdbcluster # Connect via service name
      WORDPRESS_DB_NAME: wordpress
      WORDPRESS_DB_USER: wordpress
      WORDPRESS_DB_PASSWORD_FILE: /run/secrets/mysql_password
      WORDPRESS_CONFIG_EXTRA: |
        define('WP_REDIS_HOST', 'redis');
        # define('WP_REDIS_PASSWORD', 'your-redis-password'); # Add if using Redis password
    volumes:
      - wp-content:/var/www/html/wp-content # Needs access to execute WP PHP files
    secrets:
      - mysql_password
    healthcheck:
      test: ["CMD", "php-fpm-healthcheck"] # Specific healthcheck for FPM if image provides one, or check socket
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 20s # Give FPM time to start

  # Redis
  redis:
    image: redis:7.2-alpine
    networks:
      - backend
    # command: redis-server --requirepass $$REDIS_PASSWORD # Optional: Add password
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
      resources: # Add appropriate limits/reservations
        limits:
          memory: 256M
        reservations:
          memory: 128M
    # secrets: # Add if using password
    #   - redis_password
    # volumes: # Optional: Add persistence
    #   - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # Traefik Reverse Proxy
  traefik:
    image: traefik:3.0
    command:
      - "--api.dashboard=true"
      - "--log.level=INFO" # Or DEBUG for more info
      # - "--api.insecure=true" # If you want dashboard access without auth (NOT recommended for prod)
      # Add middleware for basic auth on dashboard (see Traefik docs)
      # - "--api.dashboard.middlewares=admin-auth@docker"
      - "--providers.docker.swarmMode=true"
      - "--providers.docker.exposedByDefault=false"
      - "--providers.docker.network=frontend" # Specify network Traefik uses to reach containers
      - "--entryPoints.web.address=:80"
      - "--entryPoints.web.http.redirections.entryPoint.to=websecure" # Global HTTP->HTTPS redirect
      - "--entryPoints.web.http.redirections.entryPoint.scheme=https"
      - "--entryPoints.websecure.address=:443"
      - "--entryPoints.websecure.http.tls=true"
      - "--certificatesResolvers.letsencrypt.acme.email=YOUR_REAL_EMAIL@example.com" # *** CHANGE THIS ***
      - "--certificatesResolvers.letsencrypt.acme.storage=/letsencrypt/acme.json"
      - "--certificatesResolvers.letsencrypt.acme.httpChallenge.entryPoint=web"
    networks:
      - frontend # Also needs backend if services are only on backend
    ports:
      - 80:80
      - 443:443
      # - 8080:8080 # Expose dashboard/API if needed (secure it!)
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro # Read-only is slightly safer
      - letsencrypt:/letsencrypt
    deploy:
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        condition: on-failure
      labels: # Example: Secure dashboard with basic auth
        # Create middleware (replace user/pass hash)
        # - "traefik.http.middlewares.admin-auth.basicauth.users=admin:$$apr1$$...$$..."
        # Apply middleware to dashboard router
        - "traefik.http.routers.api.rule=Host(`traefik.your-domain.com`)" # Optional: Host rule for API
        - "traefik.http.routers.api.entrypoints=websecure"
        - "traefik.http.routers.api.tls=true"
        - "traefik.http.routers.api.tls.certresolver=letsencrypt"
        # - "traefik.http.routers.api.middlewares=admin-auth@docker" # Apply auth middleware
        - "traefik.http.routers.api.service=api@internal"

networks:
  frontend:
    driver: overlay # Explicitly state overlay driver for Swarm
  backend:
    driver: overlay
    internal: true # Good practice if only internal services need it

volumes:
  wpdb-data:
  wp-content:
  letsencrypt:
  # redis-data: # Define if using Redis persistence

# --- End of File ---

# Notes:
# 1.  Galera Bootstrap: Manually start the *first* wpdbcluster container with MARIADB_GALERA_CLUSTER_BOOTSTRAP="yes", then remove it and scale.
# 2.  Secrets: Create `./secrets/mysql_root_password.txt` and `./secrets/mysql_password.txt` containing the respective passwords before deploying.
# 3.  Nginx Config: Create an `nginx.conf` file to configure Nginx to serve WordPress and proxy PHP requests to `wordpress_fpm:9000`. Examples are readily available online.
# 4.  Domain Name: Replace `your-domain.com` with your actual domain.
# 5.  Email: Replace `YOUR_REAL_EMAIL@example.com` with your valid email for Let's Encrypt.
# 6.  Resources: Adjust CPU/memory limits and reservations based on your actual needs and server capacity.
# 7.  .env File: You likely need a `.env` file in the same directory to define variables like `MYSQL_PASSWORD`, etc., if you don't use secrets for everything (though secrets are preferred).